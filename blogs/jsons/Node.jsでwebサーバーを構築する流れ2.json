{
  "title": "Node.jsでwebサーバーを構築する流れ#2【本当の基礎】",
  "img": "https://i.imgur.com/9MM74X2.jpg",
  "tags": "Node.js",
  "created_at": "2020-08-08 00:56:00",
  "bodyContent": "# Node.jsでwebサーバーを構築する流れ#2【本当の基礎】\n![](https://i.imgur.com/9MM74X2.jpg)\n\n## 前回(1章)\nhttp://tanabatablog.net/blog?title=Node.js%E3%81%A7web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B%E6%B5%81%E3%82%8C1\n\n## chalkを使う\napp.jsに少し追加と変更を加える\n\n```javascript\n// app.js\nconst chalk = require(\"chalk\")\n\n// ・・・\n\napp.listen(PORT,()=>{\n  console.log(\n    `express app listen on ${chalk.yellow(PORT)} port.\\n`\n    + `open ${chalk.yellow(`http://localhost:${PORT}`)} for web browser.`\n  )\n})\n\n```\n\nこうすると出力されるログに色を付けることができる。この場合は目立たせたい部分を黄色にしている。\n\n\n## debugを使う\napp.jsの console.log を debug に置き換える\n\n```javascript\n// app.js\nconst debug = require(\"debug\")(\"app\")\n\n// ・・・\n\napp.listen(PORT,()=>{\n  debug(\n    `express app listen on ${chalk.yellow(PORT)} port.\\n`\n    + `open ${chalk.yellow(`http://localhost:${PORT}`)} for web browser.`\n  )\n})\n```\n\nログを出力するというのはconsole.logと一緒ですが、本番環境で動かす際debugの方はログを出力しません。\n\nこれからはapp.jsをデバック環境で実行したいときは下記のように明示的に設定してあげましょう。\n```shell\nDEBUG=app node app.js\n```\n\n## morganをmiddlewareに設定する\n\n```javascript\n// app.js\nconst morgan = require(\"morgan\")\napp.use(morgan(\"short\"))\n```\n\nHTTPアクセス情報や普段ブラウザで見るようなリソース情報もログ出力することができます。\n\nmorganの引数に渡す文字列によって出力する情報の詳細度が変わってきます。今回は簡単な情報だけを出力する short を選択しました。\n\n\n## nodemonの設定\nnodemonが提供してくれる主な機能の2つを使って開発環境を充実させていきます。\n\nnodemonはjsonファイルで設定を付け足すことができるのでまずはそれを書いていきたいと思うのですが、なんと便利なことにpackage.jsonで簡単に書くこともできるので今回はその形式でやります。\n\n```json\n// package.json\n\n  // ・・・\n  \"nodemonConfig\": {\n    \"restartable\": \"rs\",\n    \"ignore\": [\n      \"node_modules/**/node_modules\"\n    ],\n    \"delay\": \"2500\",\n    \"env\": {\n      \"NODE_ENV\": \"development\",\n      \"PORT\": 4000\n    }\n  }\n```\n\n```restartable```はサーバー起動中にコンソールに打ち込むことで即時再起動させることができる文字列を設定できるオプションです。\n\n```ignore```は監視対象外にしたいファイルやフォルダを指定できます。\n\n```delay```は変更があってから再起動をおこなうまでに遅延を作ることができます。頻繁に保存をしてしまう癖があるので、そのたびに再起動がかかると負荷もかかるということもありこの設定をいつも追加しています。\n\n```env```はその名の通りnodemonが提供する環境変数です。めっちゃ便利。\n\n次にサーバー起動時にnodemonを使うように設定しましょう。package.jsonのscriptsを下記のように変更します。\n\n```json\n// package.json\n  \n  // ・・・\n  \"scripts\": {\n    \"server\": \"DEBUG=app nodemon app.js\"\n  },\n```\n\nそしてapp.jsのPORTを先ほど設定したnodemonのenvからもらってくるように変更します\n```javascript\n// app.js\nconst PORT = process.env.PORT || 3000\n```\n\n## お疲れさまでした\n次の章ではexpressで性的ファイルのホスティングの設定をします\n次の章↓",
  "bodyHtml": "<h1>Node.jsでwebサーバーを構築する流れ#2【本当の基礎】</h1>\n<p><img src=\"https://i.imgur.com/9MM74X2.jpg\" alt=\"\"></p>\n<h2>前回(1章)</h2>\n<p>http://tanabatablog.net/blog?title=Node.js%E3%81%A7web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B%E6%B5%81%E3%82%8C1</p>\n<h2>chalkを使う</h2>\n<p>app.jsに少し追加と変更を加える</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"chalk\"</span>)\n\n<span class=\"hljs-comment\">// ・・・</span>\n\napp.listen(PORT,()=&gt;{\n  <span class=\"hljs-built_in\">console</span>.log(\n    <span class=\"hljs-string\">`express app listen on <span class=\"hljs-subst\">${chalk.yellow(PORT)}</span> port.\\n`</span>\n    + <span class=\"hljs-string\">`open <span class=\"hljs-subst\">${chalk.yellow(<span class=\"hljs-string\">`http://localhost:<span class=\"hljs-subst\">${PORT}</span>`</span>)}</span> for web browser.`</span>\n  )\n})</code></pre><p>こうすると出力されるログに色を付けることができる。この場合は目立たせたい部分を黄色にしている。</p>\n<h2>debugを使う</h2>\n<p>app.jsの console.log を debug に置き換える</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> debug = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"debug\"</span>)(<span class=\"hljs-string\">\"app\"</span>)\n\n<span class=\"hljs-comment\">// ・・・</span>\n\napp.listen(PORT,()=&gt;{\n  debug(\n    <span class=\"hljs-string\">`express app listen on <span class=\"hljs-subst\">${chalk.yellow(PORT)}</span> port.\\n`</span>\n    + <span class=\"hljs-string\">`open <span class=\"hljs-subst\">${chalk.yellow(<span class=\"hljs-string\">`http://localhost:<span class=\"hljs-subst\">${PORT}</span>`</span>)}</span> for web browser.`</span>\n  )\n})</code></pre><p>ログを出力するというのはconsole.logと一緒ですが、本番環境で動かす際debugの方はログを出力しません。</p>\n<p>これからはapp.jsをデバック環境で実行したいときは下記のように明示的に設定してあげましょう。</p>\n<pre><code class=\"hljs\">DEBUG=app node app.js</code></pre><h2>morganをmiddlewareに設定する</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> morgan = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"morgan\"</span>)\napp.use(morgan(<span class=\"hljs-string\">\"short\"</span>))</code></pre><p>HTTPアクセス情報や普段ブラウザで見るようなリソース情報もログ出力することができます。</p>\n<p>morganの引数に渡す文字列によって出力する情報の詳細度が変わってきます。今回は簡単な情報だけを出力する short を選択しました。</p>\n<h2>nodemonの設定</h2>\n<p>nodemonが提供してくれる主な機能の2つを使って開発環境を充実させていきます。</p>\n<p>nodemonはjsonファイルで設定を付け足すことができるのでまずはそれを書いていきたいと思うのですが、なんと便利なことにpackage.jsonで簡単に書くこともできるので今回はその形式でやります。</p>\n<pre><code class=\"hljs\">// package.json\n\n  // ・・・\n  \"nodemonConfig\": {\n    \"restartable\": \"rs\",\n    \"ignore\": [\n      \"node_modules/**/node_modules\"\n    ],\n    \"delay\": \"2500\",\n    \"env\": {\n      \"NODE_ENV\": \"development\",\n      \"PORT\": 4000\n    }\n  }</code></pre><p><code>restartable</code>はサーバー起動中にコンソールに打ち込むことで即時再起動させることができる文字列を設定できるオプションです。</p>\n<p><code>ignore</code>は監視対象外にしたいファイルやフォルダを指定できます。</p>\n<p><code>delay</code>は変更があってから再起動をおこなうまでに遅延を作ることができます。頻繁に保存をしてしまう癖があるので、そのたびに再起動がかかると負荷もかかるということもありこの設定をいつも追加しています。</p>\n<p><code>env</code>はその名の通りnodemonが提供する環境変数です。めっちゃ便利。</p>\n<p>次にサーバー起動時にnodemonを使うように設定しましょう。package.jsonのscriptsを下記のように変更します。</p>\n<pre><code class=\"hljs\">// package.json\n  \n  // ・・・\n  \"scripts\": {\n    \"server\": \"DEBUG=app nodemon app.js\"\n  },</code></pre><p>そしてapp.jsのPORTを先ほど設定したnodemonのenvからもらってくるように変更します</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> PORT = process.env.PORT || <span class=\"hljs-number\">3000</span></code></pre><h2>お疲れさまでした</h2>\n<p>次の章ではexpressで性的ファイルのホスティングの設定をします\n次の章↓</p>\n",
  "preview": "",
  "dir": "blogs/jsons",
  "base": "Node.jsでwebサーバーを構築する流れ2.json",
  "ext": ".json",
  "sourceBase": "Node.jsでwebサーバーを構築する流れ2.md",
  "sourceExt": ".md"
}