{
  "title": "ReactのuseStateのセッターで配列を更新しても再レンダリングされない時",
  "tags": "React",
  "img": "https://bs-uploads.toptal.io/blackfish-uploads/blog/post/seo/og_image_file/og_image/16097/react-context-api-4929b3703a1a7082d99b53eb1bbfc31f.png",
  "created_at": "2020-07-23 19:45:56",
  "bodyContent": "# React の useState のセッターで配列を更新しても再レンダリングされない時\n\n## 前置き\n\nReact の state hook で配列を定義していて、更新したいと思いセッターに値を渡すと中身は更新されているのにコンポーネントが再レンダリングされない事案にぶち当たりました。\n\n```tsx\nconst [hoge, setHoge] = React.useState(InitialArray)\n```\n\nこれに悩まされて数時間無駄にしたので誰かのお役に立てば...\n\n## 問題のコード\n\n問題となるコードのサンプルを作ってみました\n\n```jsx\nconst LunchList = () => {\n  const [lunchlist, setList] = React.useState(InitialArray)\n\n  React.useEffect(() => {\n    const setvalue = lunchlist\n    setvalue.push('パスタ') //重要\n    setList(setvalue)\n  })\n}\n```\n\nパット見動きそうなのですがこれだと前置きで話した通り再レンダリングされません。\n\n## なぜ？\n\n調べてみたところ React の state hook は\n\n```javascript\nobject.is()\n```\n\nを使って変更があったかどうかを判別しているので、\n\n今回の例のように`lunchlist`をコピーした`setvalue`を\n`push()` などで直接操作してセッターに渡しても再レンダリングされないようです。\n\n> 公式の記事\n> If you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\n\n## 解決\n\nオリジナルでもコピーでもダメなら新しい配列をつくってしまう\n\n```javascript\nconst setvalue = [...lunchlist, 'パスタ'] //解決\nsetList(setvalue)\n```\n\nこうしてしまえば`object.is()`で変更があったか判別できるので再レンダリングしてもらえます\n\n以上",
  "bodyHtml": "<h1>React の useState のセッターで配列を更新しても再レンダリングされない時</h1>\n<h2>前置き</h2>\n<p>React の state hook で配列を定義していて、更新したいと思いセッターに値を渡すと中身は更新されているのにコンポーネントが再レンダリングされない事案にぶち当たりました。</p>\n<pre><code class=\"hljs\">const [hoge, setHoge] = React.useState(InitialArray)</code></pre><p>これに悩まされて数時間無駄にしたので誰かのお役に立てば...</p>\n<h2>問題のコード</h2>\n<p>問題となるコードのサンプルを作ってみました</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> LunchList = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [lunchlist, setList] = React.useState(InitialArray)\n\n  React.useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> setvalue = lunchlist\n    setvalue.push(<span class=\"hljs-string\">'パスタ'</span>) <span class=\"hljs-comment\">//重要</span>\n    setList(setvalue)\n  })\n}</code></pre><p>パット見動きそうなのですがこれだと前置きで話した通り再レンダリングされません。</p>\n<h2>なぜ？</h2>\n<p>調べてみたところ React の state hook は</p>\n<pre><code class=\"hljs\">object.is()</code></pre><p>を使って変更があったかどうかを判別しているので、</p>\n<p>今回の例のように<code>lunchlist</code>をコピーした<code>setvalue</code>を\n<code>push()</code> などで直接操作してセッターに渡しても再レンダリングされないようです。</p>\n<blockquote>\n<p>公式の記事\nIf you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)</p>\n</blockquote>\n<h2>解決</h2>\n<p>オリジナルでもコピーでもダメなら新しい配列をつくってしまう</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> setvalue = [...lunchlist, <span class=\"hljs-string\">'パスタ'</span>] <span class=\"hljs-comment\">//解決</span>\nsetList(setvalue)</code></pre><p>こうしてしまえば<code>object.is()</code>で変更があったか判別できるので再レンダリングしてもらえます</p>\n<p>以上</p>\n",
  "preview": "React の useState のセッターで配列を更新しても再レンダリングされない時\n\n前置き\n\nReact の state hook",
  "dir": "blogs/jsons",
  "base": "ReactのuseStateのセッターで配列を更新しても再レンダリングされない時.json",
  "ext": ".json",
  "sourceBase": "ReactのuseStateのセッターで配列を更新しても再レンダリングされない時.md",
  "sourceExt": ".md"
}