{
  "title": "Node.jsでwebサーバーを構築する流れ#1【本当の基礎】",
  "img": "https://i.imgur.com/9MM74X2.jpg",
  "tags": "Node.js",
  "created_at": "2020-08-07 11:16:00",
  "bodyContent": "# Node.jsでwebサーバーを構築する流れ#1【本当の基礎】\n![](https://i.imgur.com/9MM74X2.jpg)\n\n## 前置き\n今回はNode.jsのexpressを使ってwebサーバーを立てていきたいと思います。\n\n(Node.jsは導入済みとして話を進めていきます)\n\nまた、この記事は「動けばいいやー」ではなく実際に現場環境でも使われるようなデバッグツールやミドルウェアを導入して**本当の基礎**を書いていきたいと思います。\n\n## expressの概要\nexpressはwebアプリケーションを構築するためのNode.jsパッケージです。\n\nwebアプリケーションを構築するパッケージは他にもいろいろありますが、その中でもexpressはとても「柔軟」で「必要最小限」なので僕は大好きです。\n\n必要最低限といったとおりexpressのコードを書く機会はそこまで多くなく素のJavaScriptを書くことが多いのでロジック理解なども深まります。\n\n## 必要モジュールのインストール\n\nnpmをつかって必要なモジュールをインストールしていきます。\n\n個人的なおすすめも入っています。\n\nすべてグローバルではなくローカルにインストールしてください。\n\n* express\n  * 上の概要で記述した通り。\n* nodemon\n  * \n* chalk\n  * logに吐き出す文字列に色を付けることができる。\n* morgan\n  * HTTPアクセスやブラウザのコンソールで手に入るログなどをサーバー側でも出力できるlogger。\n* debug\n  * console.logに代わって使えるメソッドを提供。本番環境ではログを出力しない。\n* ESlint\n  * JavaScriptの静的検証ツール。コードを実行する前に分かる範囲でバグを見つけたり括弧やスペースの使い方などを、設定したスタイル(ルール)に統一できたりする。\n* eslint-config-airbnb-base\n  * ESlintのスタイル設定(ルール)のテンプレートみたいな。好みで使う。\n* eslint-plugin-import\n  * ESlintを適切に動かすために必要なモジュール(import/exportなどのルールが提供されている)\n\n## ESlintセットアップ\n\n```shell\n./node_modules/.bin/eslint --init\n```\nその後いくつかの質問をされるのでプロジェクトにあった回答をしていく。\n\n設定ファイルの生成は js , json , yml が選択できるが個人的にはjsonがおすすめ。\n\nそれぞれのIDEでESlintの拡張機能を入れておくとなお良し。\n\n> (jsにすると書いてる途中にリンターが適応されていって気持ち悪いのと、jsonが主流なのでドキュメントが多い)\n\n\n## 3000番ポートで待機\n\n```javascript\n// app.js\nconst express = require(\"express\")\n\nconst app = express()\nconst PORT = 3000\n\napp.get(\"/\",(req,res)=>{\n  // ルートアクセスされたときの処理\n})\n\napp.listen(PORT,()=>{\n  console.log(\n    `express app listen on ${PORT} port.\\n`\n    + `open http://localhost:${PORT} for web browser.`\n  )\n})\n\n```\n\n## おつかれさまです\nキリがいいので1章はここまで！2章はこちら↓\nhttp://tanabatablog.net/blog?title=Node.jsでwebサーバーを構築する流れ2",
  "bodyHtml": "<h1>Node.jsでwebサーバーを構築する流れ#1【本当の基礎】</h1>\n<p><img src=\"https://i.imgur.com/9MM74X2.jpg\" alt=\"\"></p>\n<h2>前置き</h2>\n<p>今回はNode.jsのexpressを使ってwebサーバーを立てていきたいと思います。</p>\n<p>(Node.jsは導入済みとして話を進めていきます)</p>\n<p>また、この記事は「動けばいいやー」ではなく実際に現場環境でも使われるようなデバッグツールやミドルウェアを導入して<strong>本当の基礎</strong>を書いていきたいと思います。</p>\n<h2>expressの概要</h2>\n<p>expressはwebアプリケーションを構築するためのNode.jsパッケージです。</p>\n<p>webアプリケーションを構築するパッケージは他にもいろいろありますが、その中でもexpressはとても「柔軟」で「必要最小限」なので僕は大好きです。</p>\n<p>必要最低限といったとおりexpressのコードを書く機会はそこまで多くなく素のJavaScriptを書くことが多いのでロジック理解なども深まります。</p>\n<h2>必要モジュールのインストール</h2>\n<p>npmをつかって必要なモジュールをインストールしていきます。</p>\n<p>個人的なおすすめも入っています。</p>\n<p>すべてグローバルではなくローカルにインストールしてください。</p>\n<ul>\n<li>express\n<ul>\n<li>上の概要で記述した通り。</li>\n</ul>\n</li>\n<li>nodemon\n*</li>\n<li>chalk\n<ul>\n<li>logに吐き出す文字列に色を付けることができる。</li>\n</ul>\n</li>\n<li>morgan\n<ul>\n<li>HTTPアクセスやブラウザのコンソールで手に入るログなどをサーバー側でも出力できるlogger。</li>\n</ul>\n</li>\n<li>debug\n<ul>\n<li>console.logに代わって使えるメソッドを提供。本番環境ではログを出力しない。</li>\n</ul>\n</li>\n<li>ESlint\n<ul>\n<li>JavaScriptの静的検証ツール。コードを実行する前に分かる範囲でバグを見つけたり括弧やスペースの使い方などを、設定したスタイル(ルール)に統一できたりする。</li>\n</ul>\n</li>\n<li>eslint-config-airbnb-base\n<ul>\n<li>ESlintのスタイル設定(ルール)のテンプレートみたいな。好みで使う。</li>\n</ul>\n</li>\n<li>eslint-plugin-import\n<ul>\n<li>ESlintを適切に動かすために必要なモジュール(import/exportなどのルールが提供されている)</li>\n</ul>\n</li>\n</ul>\n<h2>ESlintセットアップ</h2>\n<pre><code class=\"hljs\">./node_modules/.bin/eslint --init</code></pre><p>その後いくつかの質問をされるのでプロジェクトにあった回答をしていく。</p>\n<p>設定ファイルの生成は js , json , yml が選択できるが個人的にはjsonがおすすめ。</p>\n<p>それぞれのIDEでESlintの拡張機能を入れておくとなお良し。</p>\n<blockquote>\n<p>(jsにすると書いてる途中にリンターが適応されていって気持ち悪いのと、jsonが主流なのでドキュメントが多い)</p>\n</blockquote>\n<h2>3000番ポートで待機</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>)\n\n<span class=\"hljs-keyword\">const</span> app = express()\n<span class=\"hljs-keyword\">const</span> PORT = <span class=\"hljs-number\">3000</span>\n\napp.get(<span class=\"hljs-string\">\"/\"</span>,(req,res)=&gt;{\n  <span class=\"hljs-comment\">// ルートアクセスされたときの処理</span>\n})\n\napp.listen(PORT,()=&gt;{\n  <span class=\"hljs-built_in\">console</span>.log(\n    <span class=\"hljs-string\">`express app listen on <span class=\"hljs-subst\">${PORT}</span> port.\\n`</span>\n    + <span class=\"hljs-string\">`open http://localhost:<span class=\"hljs-subst\">${PORT}</span> for web browser.`</span>\n  )\n})</code></pre><h2>おつかれさまです</h2>\n<p>キリがいいので1章はここまで！2章はこちら↓\nhttp://tanabatablog.net/blog?title=Node.jsでwebサーバーを構築する流れ2</p>\n",
  "preview": "",
  "dir": "blogs/jsons",
  "base": "Node.jsでwebサーバーを構築する流れ1.json",
  "ext": ".json",
  "sourceBase": "Node.jsでwebサーバーを構築する流れ1.md",
  "sourceExt": ".md"
}