{
  "title": "ExpressとReactでWEBアプリケーション構築してみよう",
  "tags": "React",
  "img": "https://s3-ap-northeast-1.amazonaws.com/i.schoo/images/class/600x260/3628.jpg",
  "created_at": "2020-07-29 12:53:00",
  "bodyContent": "## 最終的なディレクトリ構成\n\n```\n./app\n|----client/\n     |----config\n          |----webpack.config.js\n          |----webpack.config.dev.js\n     |----dist(distribution)/\n     |----src/\n          |----index.html\n          |----index.jsx\n|----server/\n     |----server.js\n|----package.json\n|----tsconfig,json\n```\n\n## フロント側を作っていく(client)\n\n何はともあれ **npm init**\n\n```shell\nnpm init -y\n```\n\nその後必要なパッケージをインストールしていく\n\n#### ▶ フロント側では webpack を使っていくのでそれ関係\n\n```shell\nnpm i -D webpack webpack-cli html-webpack-plugin webpack-dev-server\n```\n\n|    パッケージ名     | 説明                                                                                 |\n| :-----------------: | :----------------------------------------------------------------------------------- |\n|       webpack       | js,css,画像ファイルなどをトランスパイルして 1 つの js ファイルにバンドルできるツール |\n|     webpack-cli     | webpack を実行するための cli                                                         |\n| html-webpack-plugin | バンドルされた js ファイルを埋め込んだ html を出力できる                             |\n| webpack-dev-server  | webpack で開発する時に使用できる web サーバー(HMR,Proxy が使える)                    |\n\n#### ▶ トランスパイル時に使用する babel 周り\n\n```shell\nnpm i -D babel-core babel-loader@7 babel-preset-env babel-preset-react\n```\n\n#### ▶ React\n\n```shell\nnpm i -S react react-dom\n```\n\n### webpack の設定ファイルを書く(webpack.config.js)\n\n```javascript\nconst HtmlWebPackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nconst htmlWebpackPlugin = new HtmlWebPackPlugin({\n  template: './client/src/index.html', //後で作っていきます\n  filename: './index.html'\n})\n\nmodule.exports = {\n  entry: {\n    index: './client/src/index.jsx' // 後で作っていきます\n  },\n  output: {\n    path: path.resolve('client/dist'),\n    filename: '[name].bundle.js' //[name]がentry名に置き換えられるのでこの場合index.bundle.jsになります\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader' //先ほどインストールしたbabel-loader\n        }\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['*', '.js', '.jsx'] //拡張子まで書かなくてもファイルをimportすることができるようになる\n  },\n  plugins: [htmlWebpackPlugin]\n}\n```\n\nメモ\n\n> webpack.config.js は cli によって実行された場所をルートとしてみることに注意\n> \\_\\_dirname はそのファイルがおかれているディレクトリまでのパスを取得できる\n> path.resolve は引数で指定したファイルの絶対パスを返す\n\n### React を書いていく\n\n#### ▶ まずベースとなる html\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"ja\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>tanabata-blog</title>\n  </head>\n  <body>\n    <section id=\"app\"></section>\n  </body>\n</html>\n```\n\n#### ▶ jsx ファイル\n\n```javascript\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Index = () => {\n  return <div>Hello,world.</div>\n}\nReactDOM.render(<Index />, document.getElementById('app'))\n```\n\n### package.json を編集して実行準備\n\nscripts に webpack コマンドを設定\n\nbabel の preset を設定\n\n```json\n----略\n\"scripts\": {\n    \"client\": \"webpack-dev-server --config ./client/config/webpack.config.js --open --mode development\",\n    \"build\": \"webpack --config ./client/config/webpack.config.js --mode development\"\n },\n \"babel\": {\n    \"presets\": [\n      \"babel-preset-env\",\n      \"babel-preset-react\"\n    ]\n  },\n----略\n```\n\n### 実行してみる\n\nlocalhost:8080 で dev サーバーが立ち上がる\n\n```shell\nnpm run client\n```\n\n./client/dist/にバンドルされ js ファイルとそれを読み込む html が出力される\n\n```shell\nnpm run build\n```",
  "bodyHtml": "<h2>最終的なディレクトリ構成</h2>\n<pre><code>./app\n|----client/\n     |----config\n          |----webpack.config.js\n          |----webpack.config.dev.js\n     |----dist(distribution)/\n     |----src/\n          |----index.html\n          |----index.jsx\n|----server/\n     |----server.js\n|----package.json\n|----tsconfig,json\n</code></pre>\n<h2>フロント側を作っていく(client)</h2>\n<p>何はともあれ <strong>npm init</strong></p>\n<pre><code class=\"hljs\">npm init -y</code></pre><p>その後必要なパッケージをインストールしていく</p>\n<h4>▶ フロント側では webpack を使っていくのでそれ関係</h4>\n<pre><code class=\"hljs\">npm i -D webpack webpack-cli html-webpack-plugin webpack-dev-server</code></pre><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">パッケージ名</th>\n<th style=\"text-align:left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">webpack</td>\n<td style=\"text-align:left\">js,css,画像ファイルなどをトランスパイルして 1 つの js ファイルにバンドルできるツール</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">webpack-cli</td>\n<td style=\"text-align:left\">webpack を実行するための cli</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">html-webpack-plugin</td>\n<td style=\"text-align:left\">バンドルされた js ファイルを埋め込んだ html を出力できる</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">webpack-dev-server</td>\n<td style=\"text-align:left\">webpack で開発する時に使用できる web サーバー(HMR,Proxy が使える)</td>\n</tr>\n</tbody>\n</table>\n<h4>▶ トランスパイル時に使用する babel 周り</h4>\n<pre><code class=\"hljs\">npm i -D babel-core babel-loader@7 babel-preset-env babel-preset-react</code></pre><h4>▶ React</h4>\n<pre><code class=\"hljs\">npm i -S react react-dom</code></pre><h3>webpack の設定ファイルを書く(webpack.config.js)</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> HtmlWebPackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n\n<span class=\"hljs-keyword\">const</span> htmlWebpackPlugin = <span class=\"hljs-keyword\">new</span> HtmlWebPackPlugin({\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'./client/src/index.html'</span>, <span class=\"hljs-comment\">//後で作っていきます</span>\n  <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'./index.html'</span>\n})\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">'./client/src/index.jsx'</span> <span class=\"hljs-comment\">// 後で作っていきます</span>\n  },\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">path</span>: path.resolve(<span class=\"hljs-string\">'client/dist'</span>),\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[name].bundle.js'</span> <span class=\"hljs-comment\">//[name]がentry名に置き換えられるのでこの場合index.bundle.jsになります</span>\n  },\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|jsx)$/</span>,\n        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n        <span class=\"hljs-attr\">use</span>: {\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'babel-loader'</span> <span class=\"hljs-comment\">//先ほどインストールしたbabel-loader</span>\n        }\n      }\n    ]\n  },\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">'*'</span>, <span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.jsx'</span>] <span class=\"hljs-comment\">//拡張子まで書かなくてもファイルをimportすることができるようになる</span>\n  },\n  <span class=\"hljs-attr\">plugins</span>: [htmlWebpackPlugin]\n}</code></pre><p>メモ</p>\n<blockquote>\n<p>webpack.config.js は cli によって実行された場所をルートとしてみることに注意\n__dirname はそのファイルがおかれているディレクトリまでのパスを取得できる\npath.resolve は引数で指定したファイルの絶対パスを返す</p>\n</blockquote>\n<h3>React を書いていく</h3>\n<h4>▶ まずベースとなる html</h4>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ja\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>tanabata-blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre><h4>▶ jsx ファイル</h4>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span>\n\n<span class=\"hljs-keyword\">const</span> Index = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Hello,world.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n}\nReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Index</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'app'</span>))</code></pre><h3>package.json を編集して実行準備</h3>\n<p>scripts に webpack コマンドを設定</p>\n<p>babel の preset を設定</p>\n<pre><code class=\"hljs\">----略\n\"scripts\": {\n    \"client\": \"webpack-dev-server --config ./client/config/webpack.config.js --open --mode development\",\n    \"build\": \"webpack --config ./client/config/webpack.config.js --mode development\"\n },\n \"babel\": {\n    \"presets\": [\n      \"babel-preset-env\",\n      \"babel-preset-react\"\n    ]\n  },\n----略</code></pre><h3>実行してみる</h3>\n<p>localhost:8080 で dev サーバーが立ち上がる</p>\n<pre><code class=\"hljs\">npm run client</code></pre><p>./client/dist/にバンドルされ js ファイルとそれを読み込む html が出力される</p>\n<pre><code class=\"hljs\">npm run build</code></pre>",
  "preview": "最終的なディレクトリ構成\n\n./app\n|----client/\n     |----config\n          |----webpack.config.js",
  "dir": "blogs/jsons",
  "base": "ExpressとReactでWEBアプリケーション構築してみよう.json",
  "ext": ".json",
  "sourceBase": "ExpressとReactでWEBアプリケーション構築してみよう.md",
  "sourceExt": ".md"
}